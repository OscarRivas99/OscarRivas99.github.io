{"version":3,"sources":["logo.svg","Components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoForm","state","carne","horario","llegotarde","handleInputChange","bind","handleSubmit","e","preventDefault","this","props","onAddTodo","setState","target","value","name","console","log","className","onSubmit","type","onChange","placeholder","Component","App","todos","handleAddTodo","index","filter","i","todo","map","key","onClick","removeTodo","href","length","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,mgBCuF5BC,E,YApFb,aAAgB,IAAD,8BACb,+CACKC,MAAQ,CACXC,MAAO,GACPC,QAAS,GACTC,WAAY,IAEd,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARP,E,0EAWFE,GACXA,EAAEC,iBACFC,KAAKC,MAAMC,UAAUF,KAAKT,OAC1BS,KAAKG,SAAS,CACVX,MAAO,GACPC,QAAS,GACTC,WAAY,O,wCAIAI,GAAI,IAAD,EACGA,EAAEM,OAAjBC,EADY,EACZA,MAAOC,EADK,EACLA,KACdC,QAAQC,IAAIH,EAAOC,GACnBN,KAAKG,SAAL,eACGG,EAAOD,M,+BAKV,OACE,yBAAKI,UAAU,QAEb,0BAAMC,SAAUV,KAAKH,aAAcY,UAAU,aAC7C,gDACE,yBAAKA,UAAU,cACb,2BACEE,KAAK,OACLL,KAAK,QACLG,UAAU,eACVJ,MAAOL,KAAKT,MAAMC,MAClBoB,SAAUZ,KAAKL,kBACfkB,YAAY,MAKhB,yBAAKJ,UAAU,cACb,gEACA,4BACIH,KAAK,UACLG,UAAU,eACVJ,MAAOL,KAAKT,MAAME,QAClBmB,SAAUZ,KAAKL,mBAEX,yDACA,2DACA,gEACA,2DACA,2DACA,8DAGV,yBAAKc,UAAU,cACf,2CACE,2BACEE,KAAK,OACLL,KAAK,aACLG,UAAU,eACVJ,MAAOL,KAAKT,MAAMG,WAClBkB,SAAUZ,KAAKL,kBACfkB,YAAY,WAGhB,4BAAQF,KAAK,SAASF,UAAU,mBAAhC,kB,GA3EaK,aC4FRC,E,YAnFb,aAAe,IAAD,8BACZ,+CACKxB,MAAQ,CACXyB,WAEF,EAAKC,cAAgB,EAAKA,cAAcrB,KAAnB,gBALT,E,wEAQHsB,GACTlB,KAAKG,SAAS,CACZa,MAAOhB,KAAKT,MAAMyB,MAAMG,QAAO,SAACrB,EAAGsB,GACjC,OAAOA,IAAMF,S,oCAKLG,GACZrB,KAAKG,SAAS,CACZa,MAAM,GAAD,mBAAMhB,KAAKT,MAAMyB,OAAjB,CAAwBK,Q,+BAIvB,IAAD,OACDL,EAAQhB,KAAKT,MAAMyB,MAAMM,KAAI,SAACD,EAAMD,GACxC,OACE,yBAAKX,UAAU,WAAWc,IAAKH,GAC7B,yBAAKX,UAAU,aACb,yBAAKA,UAAU,0BACb,4BAAKY,EAAK7B,OACV,0BAAMiB,UAAU,sCAEbY,EAAK5B,UAGV,yBAAKgB,UAAU,aACd,2CACEY,EAAK3B,YAER,yBAAKe,UAAU,eACb,4BACEA,UAAU,iBACVe,QAAS,EAAKC,WAAW7B,KAAK,EAAMwB,IAFtC,gBAYV,OACE,yBAAKX,UAAU,OAEb,yBAAKA,UAAU,8BACb,uBAAGA,UAAU,eAAeiB,KAAK,KAAjC,uBAEE,0BAAMjB,UAAU,qCACbT,KAAKT,MAAMyB,MAAMW,UAKxB,yBAAKlB,UAAU,aACb,yBAAKA,UAAU,YAEb,yBAAKA,UAAU,wBACX,yBAAKmB,IAAKC,IAAMpB,UAAU,WAAWqB,IAAI,SAC3C,kBAAC,EAAD,CAAU5B,UAAWF,KAAKiB,iBAG5B,yBAAKR,UAAU,YACb,yBAAKA,UAAU,OACZO,W,GA1ECF,aCEEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fbcae35c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\r\n\r\nclass TodoForm extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      carne: '',\r\n      horario: '',\r\n      llegotarde: '',\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onAddTodo(this.state);\r\n    this.setState({\r\n        carne: '',\r\n        horario: '',\r\n        llegotarde: '',\r\n    });\r\n  }\r\n\r\n  handleInputChange(e) {\r\n    const {value, name} = e.target;\r\n    console.log(value, name);\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n       \r\n        <form onSubmit={this.handleSubmit} className=\"card-body\">\r\n        <p>Ingrese su Carnet</p>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"carne\"\r\n              className=\"form-control\"\r\n              value={this.state.carne}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"\"\r\n              />\r\n          </div>\r\n          \r\n          \r\n          <div className=\"form-group\">\r\n            <p>Ingrese su horario de Laboratorio</p>\r\n            <select\r\n                name=\"horario\"\r\n                className=\"form-control\"\r\n                value={this.state.horario}\r\n                onChange={this.handleInputChange}\r\n              >\r\n                    <option>Lunes de 9:00 a 11.00</option>\r\n                    <option>Martes de 13:30 a 15:30</option>\r\n                    <option>Mi√©rcoles de 9:00 a 11.00</option>\r\n                    <option>Jueves de 13:30 a 15:30</option>\r\n                    <option>Viernes de 9:00 a 11.00</option>\r\n                    <option>Viernes de 15:30 a 17:30</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n          <p>Llego Tarde?</p>\r\n            <input\r\n              type=\"text\"\r\n              name=\"llegotarde\"\r\n              className=\"form-control\"\r\n              value={this.state.llegotarde}\r\n              onChange={this.handleInputChange}\r\n              placeholder=\"Si/No\"\r\n              />\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Ingresar\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// data\nimport { todos } from './todos.json';\n\n// subcomponents\nimport TodoForm from './Components/TodoForm';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos\n    }\n    this.handleAddTodo = this.handleAddTodo.bind(this);\n  }\n\n  removeTodo(index) {\n    this.setState({\n      todos: this.state.todos.filter((e, i) => {\n        return i !== index\n      })\n    });\n  }\n\n  handleAddTodo(todo) {\n    this.setState({\n      todos: [...this.state.todos, todo]\n    })\n  }\n\n  render() {\n    const todos = this.state.todos.map((todo, i) => {\n      return (\n        <div className=\"col-md-4\" key={i}>\n          <div className=\"card mt-4\">\n            <div className=\"card-title text-center\">\n              <h3>{todo.carne}</h3>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                \n                {todo.horario}\n              </span>\n            </div>\n            <div className=\"card-body\">\n             <p>Llego Tarde?</p>  \n              {todo.llegotarde}\n            </div>\n            <div className=\"card-footer\">\n              <button\n                className=\"btn btn-danger\"\n                onClick={this.removeTodo.bind(this, i)}>\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )\n    });\n\n    // RETURN THE COMPONENT\n    return (\n      <div className=\"App\">\n\n        <nav className=\"navbar navbar-dark bg-dark\">\n          <a className=\"navbar-brand\" href=\"/\">\n            Registro Estudiantes\n            <span className=\"badge badge-pill badge-light ml-2\">\n              {this.state.todos.length}\n            </span>\n          </a>\n        </nav>\n\n        <div className=\"container\">\n          <div className=\"row mt-4\">\n\n            <div className=\"col-md-4 text-center\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <TodoForm onAddTodo={this.handleAddTodo}></TodoForm>\n            </div>\n\n            <div className=\"col-md-8\">\n              <div className=\"row\">\n                {todos}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './bootstrap.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}